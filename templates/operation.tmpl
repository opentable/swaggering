{{- if not .GoTypeInvalid -}}
func (client *Client) {{.GoMethodName}}(
{{- range .Parameters -}}
{{.Name}} {{template "type" . -}}
, {{end -}}
) ({{ if not (eq .GoBaseType "") -}}
response {{template "type" . -}}
, {{end}} err error) {
	pathParamMap := map[string]interface{}{
		{{range .Parameters -}}
		{{if eq "path" .ParamType -}}
		  "{{.Name}}": {{.Name}},
	  {{- end }}
		{{- end }}
	}

  queryParamMap := map[string]interface{}{
		{{range .Parameters -}}
		{{if eq "query" .ParamType -}}
		  "{{.Name}}": {{.Name}},
	  {{- end }}
		{{- end }}
	}

	{{if .DTORequest -}}
	{{if .MakesResult}}
    response = make({{- template "type" . -}}, 0)
    err = client.DTORequest("{{.ResourceName}}", &response, "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
		{{- if .HasBody -}}
		, body
		{{- end -}})
	{{else}}
    response = new({{.GoPackage}}
    {{- if ne .GoPackage ""}}.{{end -}}
    {{.GoBaseType}})
    err = client.DTORequest("{{.ResourceName}}", response, "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
		{{- if .HasBody -}}
		, body
		{{- end -}})
	{{end}}
	{{else if (eq .GoBaseType "")}}
  _, err = client.Request("{{.ResourceName}}", "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
	{{- if .HasBody -}}
	, body
  {{- end -}})
	{{else if eq .GoBaseType "string"}}
  resBody, err := client.Request("{{.ResourceName}}", "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
	{{- if .HasBody -}}
	, body
  {{- end -}})
	readBuf := bytes.Buffer{}
	readBuf.ReadFrom(resBody)
	response = string(readBuf.Bytes())
	{{- end}}
	return
}
{{end}}
