func (client *Client) {{.Name}}(
{{- range .Params -}}
{{.Name}} {{.TypeString -}}
, {{end -}}
) ({{ if .HasResult -}}
response {{.ResultTypeString -}}
, {{end}} err error) {
	pathParamMap := map[string]interface{}{
		{{range .Params -}}
		{{if eq "path" .ParamType -}}
		  "{{.Name}}": {{.Name}},
	  {{- end }}
		{{- end }}
	}

  queryParamMap := map[string]interface{}{
		{{range .Params -}}
		{{if eq "query" .ParamType -}}
		  "{{.Name}}": {{.Name}},
	  {{- end }}
		{{- end }}
	}

	{{if .DTORequest -}}
	{{if .MakesResult}}
    response = make({{.ResultTypeString}}, 0)
		err = client.DTORequest(&response, "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
		{{- if .HasBody -}}
		, body
		{{- end -}})
	{{else}}
    response = new({{.ResultTypeString}})
		err = client.DTORequest(response, "{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
		{{- if .HasBody -}}
		, body
		{{- end -}})
	{{end}}
	{{else if not .HasResult}}
	_, err = client.Request("{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
	{{- if .HasBody -}}
	, body
  {{- end -}})
	{{else if eq .ResultTypeString "string"}}
	resBody, err := client.Request("{{.Method}}", "{{.Path}}", pathParamMap, queryParamMap
	{{- if .HasBody -}}
	, body
  {{- end -}})
	readBuf := bytes.Buffer{}
	readBuf.ReadFrom(resBody)
	response = string(readBuf.Bytes())
	{{- end}}
	return
}
