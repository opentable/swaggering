package dtos

import (
  "fmt"
  "io"

  "github.com/opentable/swaggering"
)

{{range $enum := .Enums}}
type {{$enum.Name}} string

const (
  {{- range $value := $enum.Values}}
  {{$enum.Name}}{{$value}} {{$enum.Name}} = "{{$value}}"
  {{- end}}
)
{{end}}

type {{.Name}} struct {
  present map[string]bool
{{range $name, $prop := .Fields}}
  {{if not $prop.Valid}}// Invalid field: {{end -}}
    {{$prop.Name}} {{$prop.TypeString "dtos"}} `json:"{{$prop.SwaggerName}}
  {{- if $prop.Omittable -}}
  ,omitempty
  {{- end -}}
  "`
{{end}}
}

func (self *{{.Name}}) Populate(jsonReader io.ReadCloser) (err error) {
	return swaggering.ReadPopulate(jsonReader, self)
}

func (self *{{.Name}}) Absorb(other swaggering.DTO) error {
  if like, ok := other.(*{{.Name}}); ok {
    *self = *like
    return nil
  }
  return fmt.Errorf("A {{.Name}} cannot copy the values from %#v", other)
}

func (self *{{.Name}}) MarshalJSON() ([]byte, error) {
  return swaggering.MarshalJSON(self)
}

func (self *{{.Name}}) FormatText() string {
	return swaggering.FormatText(self)
}

func (self *{{.Name}}) FormatJSON() string {
	return swaggering.FormatJSON(self)
}

func (self *{{.Name}}) FieldsPresent() []string {
  return swaggering.PresenceFromMap(self.present)
}

func (self *{{.Name}}) SetField(name string, value interface{}) error {
  if self.present == nil {
    self.present = make(map[string]bool)
  }
  switch name {
  default:
    return fmt.Errorf("No such field %s on {{.Name}}", name)
  {{range $name, $prop := .Fields}}
    {{ if $prop.Valid }}
    case "{{$prop.SwaggerName}}", "{{$prop.Name}}":
    v, ok := value.(
      {{- $prop.TypeString "dtos" -}}
      )
      if ok {
        self.{{$prop.Name}} = v
        self.present["{{$prop.SwaggerName}}"] = true
        return nil
      } else {
        return fmt.Errorf("Field {{$prop.SwaggerName}}/{{$prop.Name}}: value %v(%T) couldn't be cast to type {{$prop.TypeString "dtos"}}", value, value)
      }
    {{end}}
  {{end}}
  }
}

func (self *{{.Name}}) GetField(name string) (interface{}, error) {
  switch name {
  default:
    return nil, fmt.Errorf("No such field %s on {{.Name}}", name)
  {{range $name, $prop := .Fields}}
    {{ if $prop.Valid }}
    case "{{$prop.SwaggerName}}", "{{$prop.Name}}":
    if self.present != nil {
      if _, ok := self.present["{{$prop.SwaggerName}}"]; ok {
        return self.{{$prop.Name}}, nil
      }
    }
    return nil, fmt.Errorf("Field {{$prop.Name}} no set on {{.Name}} %+v", self)
    {{end}}
  {{end}}
  }
}

func (self *{{.Name}}) ClearField(name string) error {
  if self.present == nil {
    self.present = make(map[string]bool)
  }
  switch name {
  default:
    return fmt.Errorf("No such field %s on {{.Name}}", name)
  {{range $name, $prop := .Fields}}
    {{ if $prop.Valid }}
  case "{{$prop.SwaggerName}}", "{{$prop.Name}}":
    self.present["{{$prop.SwaggerName}}"] = false
    {{end}}
  {{end}}
  }

  return nil
}

func (self *{{.Name}}) LoadMap(from map[string]interface{}) error {
  return swaggering.LoadMapIntoDTO(from, self)
}

type {{.Name}}List []*{{.Name}}

func (self *{{.Name}}List) Absorb(other swaggering.DTO) error {
  if like, ok := other.(*{{.Name}}List); ok {
    *self = *like
    return nil
  }
  return fmt.Errorf("A {{.Name}}List cannot copy the values from %#v", other)
}


func (list *{{.Name}}List) Populate(jsonReader io.ReadCloser) (err error) {
	return swaggering.ReadPopulate(jsonReader, list)
}

func (list *{{.Name}}List) FormatText() string {
	text := []byte{}
	for _, dto := range *list {
		text = append(text, (*dto).FormatText()...)
		text = append(text, "\n"...)
	}
	return string(text)
}

func (list *{{.Name}}List) FormatJSON() string {
	return swaggering.FormatJSON(list)
}
